# Calculs de l'attaquant.

att(X) /\ att(Y) => att(pair(X,Y)).
att(pair(X,Y)) => att(X).
att(pair(X,Y)) => att(Y).

att(X) /\ att(Y) => att(aenc(X,Y)). 
att(aenc(X,pub(Y))) /\ att(Y) => att(X).

att(X) => att(pub(X)).

# On écrira {m}_pk pour le chiffrement asymétrique du message
# m avec la clé publique pk.

# Protocole Needham-Schroeder à clé publique
#
# a -> b : {pub(ska),na}_pub(skb)
# a <- b : {na,nb}_pub(ska)
# a -> b : {nb}_pub(skb)
#
# Propriétés souhaitées:
# - si b pense qu'il parle à a, et reçoit le dernier message,
#   alors il a bien eu un échange avec a (non modélisé => dur à faire);
# - si b ne parle qu'à a, alors nb est un secret partagé uniquement
#   avec a.
#
# En fait, si a parle par ailleurs à i, i peut apprendre nb!
# Pour autant, un attaquant ne peut pas apprendre ska ni skb.

att(pub(ska)).
att(pub(skb)).

# Agent a, s'adressant à un X quelconque.

att(aenc(pair(pub(ska),na),pub(X))).
att(aenc(pair(na,Y),pub(ska))) => att(aenc(Y,pub(X))).

# Agent b, échangeant avec a seulement.

att(aenc(pair(pub(ska),X),pub(skb))) => att(aenc(pair(X,nb),pub(ska))).
